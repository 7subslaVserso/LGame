JavaSE:

package org.test;

import loon.LSetting;
import loon.LazyLoading;
import loon.Screen;
import loon.javase.Loon;

public class Main  {


	public static void main(String[] args) {
		LSetting setting = new LSetting();
		setting.isFPS = true;
		setting.isLogo = false;
		setting.logoPath = "loon_logo.png";
		// 原始大小
		setting.width = 480;
		setting.height = 320;
		// 缩放为
		setting.width_zoom = 640;
		setting.height_zoom = 480;
		setting.fps = 60;
		setting.fontName = "黑体";
		setting.appName = "test";
		setting.emulateTouch = false;
		Loon.register(setting, new LazyLoading.Data() {

			@Override
			public Screen onScreen() {
				return new YourScreen();
			}
		});
	}
}

Android:


package org.test;

import loon.Screen;
import loon.android.AndroidGame.AndroidSetting;
import loon.android.Loon;

public class MainActivity extends Loon {

	@Override
	public void onMain() {
		AndroidSetting setting = new AndroidSetting();
		setting.isFPS = true;
		setting.isLogo = false;
		setting.fullscreen = true;
		setting.width = 480;
		setting.height = 320;
		//若启动此模式，则画面等比压缩，不会失真
		setting.useRatioScaleFactor = false;
		//强制一个显示大小(在android模式下，不填则默认全屏，此模式可能会造成画面失真)
		//setting.width_zoom = getContainerWidth();
		//setting.height_zoom = getContainerHeight();
		//屏幕显示模式
		//setting.showMode = LMode.FitFill;
		setting.logoPath = "loon_logo.png";
		setting.fps = 60;
		setting.fontName = "黑体";
		setting.appName = "test";
		setting.emulateTouch = false;
		register(setting, new Data() {

			@Override
			public Screen onScreen() {
				return new YourScreen();
			}
		});
	}

}


GWT:

package loon.test;

import loon.Screen;
import loon.html5.gwt.Loon;
import loon.html5.gwt.GWTGame.GWTSetting;
import loon.html5.gwt.GWTGame.Repaint;

public class Main extends Loon {

	@Override
	public void onMain() {


		GWTSetting setting = new GWTSetting();
		setting.fps = 60;
		// source size
		setting.width = 480;
		setting.height = 320;
		// target size
		setting.width_zoom = 640;
		setting.height_zoom = 480;
		setting.repaint = Repaint.AnimationScheduler;
		setting.isFPS = true;
		setting.fontName = "黑体";
		setting.rootId = "embed-loon.test.TestLoon";
		//按屏幕缩放比例缩放
		//setting.useRatioScaleFactor = true;
		//当此项开启，并且gwt.xml中设置了loon.addtojs为true,会默认从js中加载资源
		setting.jsloadRes = false;

		//设置一个需要的初始化进度条样式（不填则默认）
	        //setting.progress = GWTProgressDef.newSimpleLogoProcess(setting);
		register(setting, new Data() {

			@Override
			public Screen onScreen() {
				return new YourScreen();
			}
		});

	
	}

}

IOS(Robovm):

package org.test;

import loon.LSetting;
import loon.Screen;
import loon.robovm.Loon;

import org.robovm.apple.foundation.NSAutoreleasePool;
import org.robovm.apple.uikit.UIApplication;

public class Main extends Loon {

	@Override
	public void onMain() {
		LSetting setting = new LSetting();
		setting.isFPS = true;
		setting.isLogo = false;
		setting.logoPath = "loon_logo.png";
		setting.fps = 60;
		// 原始大小
		setting.width = 480;
		setting.height = 320;
		// 缩放为
		setting.width_zoom = 640;
		setting.height_zoom = 480;
		setting.fontName = "黑体";
		setting.appName = "test";
		setting.emulateTouch = false;
		register(setting, new Data() {

			@Override
			public Screen onScreen() {
				return new ScreenTest();
			}
		});
	}

	public static void main(String[] args) {
		try (NSAutoreleasePool pool = new NSAutoreleasePool()) {
			UIApplication.main(args, null, Main.class);
		}
	}

}
