LoonGameEngine在设计上追求低耦合，高内聚，功能易重组的方针，并不强制用户使用何种模式或设计理念开发游戏，用户可以自行根据需求组合或扩展实现。

Loon的基础结构非常简单，抛开细节部分不谈，运行核心逻辑所真正需要的，其实只有六个类，即Platform -> LGame -> Graphics -> Display -> LProcess -> Screen。

其中Platform是具体环境的抽象，也是LGame类的载体，它在不同环境有不同的具体实现（比如Android、IOS、Windows上实现都是有差异的），但是这些差异已经被Loon统一封装，用户不必在意，从LGame类开始，这些差异就已经不复存在，而经由LGame封装为完全统一的代码与流程在引擎中运转。

从本质上讲，LGame类才是最重要的Loon对象，Loon中所有【平台无关】的代码由此开始运行，其中涵盖了Loon运行所需的最基本的对象实例。

而更进一步的Display类，则是Loon中渲染管理用类Graphics的具体承载与操作用类，Loon经由此类显示具体的游戏画面。

至于LProcess类，则是负责处理具体游戏业务逻辑的封装对象，它被内置于Display中，所有Screen产生的Loon游戏渲染与事件最终都由此类进行管理与提交。

而Screen类，则是面向用户的最基本操作抽象类（上述其他类，正常情况下用户是不必操作处理），只有继承了Screen类（或者其子类）的对象，才能作为Loon的基本操作单元，用于Loon游戏渲染与操作。