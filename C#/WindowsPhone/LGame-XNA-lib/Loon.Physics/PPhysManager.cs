// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 13-6-16 ÏÂÎç3:13    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Loon.Core.Geom;
using Loon.Utils;
using Loon.Core.Graphics.Opengl;
namespace Loon.Physics {
	
	public class PPhysManager {
		public float scale;
	
		public float offX;
		public float offY;
	
		public PPhysWorld world;
		public bool start;
		public bool enableGravity;
		public Vector2f gravity;
	
		private bool isCenterPos = false;
	
		public PPhysManager():	this(50F) {
		
		}
	
		public PPhysManager(float s) :this(s, 0.0F, 9.80665F){
			
		}
	
		public PPhysManager(float s, float gx, float gy) {
			this.world = new PPhysWorld();
			this.gravity = new Vector2f(gx, gy);
			this.start = false;
			this.enableGravity = true;
			this.scale = s;
		}
	
		public PBody AddBody(PBody body) {
			world.AddBody(body);
			return body;
		}
	
		public PBody Box(bool fix, float x, float y, float w, float h,
				float angle, float density) {
			PBody body = null;
			if (!isCenterPos) {
				body = new PBody(angle, fix, new PShape[] { new PBoxShape(
						(x + w / 2) / scale, (y + h / 2) / scale, w / scale, h
								/ scale, angle, density) });
			} else {
				body = new PBody(angle, fix,
						new PShape[] { new PBoxShape(x / scale, y / scale, w
								/ scale, h / scale, angle, density) });
			}
			return body;
		}
	
		public PBody Box(bool fix, RectBox rect, float angle, float density) {
			return Box(fix, rect.x, rect.y, (float) rect.width,
					(float) rect.height, angle, density);
		}
	
		public PBody AddBox(bool fix, float x, float y, float w, float h,
				float angle, float density) {
			PBody body = Box(fix, x, y, w, h, angle, density);
			world.AddBody(body);
			return body;
		}
	
		public PBody AddBox(bool fix, float x, float y, float w, float h) {
			return AddBox(fix, x, y, w, h, 0F, 1F);
		}
	
		public PBody AddBox(bool fix, RectBox rect, float angle, float density) {
			PBody body = Box(fix, rect, angle, density);
			world.AddBody(body);
			return body;
		}
	
		public PBody AddBox(bool fix, RectBox rect) {
			return AddBox(fix, rect, 0F, 1F);
		}
	
		public PBody Circle(bool fix, float x, float y, float r, float angle,
				float density) {
			PBody body = null;
			if (!isCenterPos) {
				body = new PBody(angle, fix, new PShape[] { new PCircleShape(x
						/ scale, y / scale, r / scale, angle, density) });
			} else {
				body = new PBody(angle, fix, new PShape[] { new PCircleShape(x
						/ scale, y / scale, r / scale, angle, density) });
			}
			return body;
		}
	
		public PBody Circle(bool fix, Circle c, float angle, float density) {
			return Circle(fix, c.x, c.y, c.radius, angle, density);
		}
	
		public PBody AddCircle(bool fix, float x, float y, float r, float angle,
				float density) {
			PBody body = Circle(fix, x, y, r, angle, density);
			world.AddBody(body);
			return body;
		}
	
		public PBody AddCircle(bool fix, float x, float y, float r, float angle) {
			return AddCircle(fix, x, y, r, angle, 1F);
		}
	
		public PBody AddCircle(bool fix, float x, float y, float r) {
			return AddCircle(fix, x, y, r, 0F, 1F);
		}
	
		public PBody Polygon(bool fix, float[] xs, float[] ys, int num,
				float angle, float density) {
			if (num < 3) {
				return null;
			}
			if (xs.Length != num) {
				xs = CollectionUtils.CopyOf(xs, num);
			}
			if (ys.Length != num) {
				ys = CollectionUtils.CopyOf(ys, num);
			}
			for (int i = 0; i < num; i++) {
				xs[i] /= scale;
				ys[i] /= scale;
			}
			PConcavePolygonShape shape = new PConcavePolygonShape(xs, ys, density);
			PBody body = new PBody(angle, fix, new PShape[] { shape });
			return body;
		}
	
		public PBody Polygon(bool fix, Polygon p, float angle, float density) {
			PPolygon tmp = p.GetPPolygon(this.scale);
			PConcavePolygonShape shape = new PConcavePolygonShape(tmp.xs, tmp.ys,
					density);
			PBody body = new PBody(angle, fix, new PShape[] { shape });
			return body;
		}
	
		public PBody AddPolygon(bool fix, float[] xs, float[] ys, int num) {
			return AddPolygon(fix, xs, ys, num, 0F, 1F);
		}
	
		public PBody AddPolygon(bool fix, float[] xs, float[] ys, int num,
				float angle, float density) {
			PBody body = Polygon(fix, xs, ys, num, angle, density);
			world.AddBody(body);
			return body;
		}
	
		public PBody AddPolygon(bool fix, Polygon p) {
			return AddPolygon(fix, p, 0F, 1F);
		}
	
		public PBody AddPolygon(bool fix, Polygon p, float angle, float density) {
			PBody body = Polygon(fix, p, angle, density);
			world.AddBody(body);
			return body;
		}
	
		public PBody Shape(bool fix, PShape shape, float angle, float density) {
			PBody body = new PBody(angle, fix, new PShape[] { shape });
			return body;
		}
	
		public PBody Shape(bool fix, PShape shape) {
			return Shape(fix, shape, 0F, 1F);
		}
	
		public PBody AddShape(bool fix, PShape shape, float angle, float density) {
			PBody body = Shape(fix, shape, angle, density);
			world.AddBody(body);
			return body;
		}
	
		public PBody AddShape(bool fix, PShape shape) {
			return AddShape(fix, shape, 0F, 1F);
		}
	
		public PBody AddShape(bool fix, LTexture shape) {
			return AddPolygon(fix, ((Polygon) shape.GetShape()));
		}
	
		public PBody AddShape(bool fix, LTexture shape, float angle,
				float density) {
			return AddPolygon(fix, ((Polygon) shape.GetShape()), angle, density);
		}
	
		public float GetWorldX(float sx) {
			return (sx - this.offX) / this.scale;
		}
	
		public float GetWorldY(float sy) {
			return (sy - this.offY) / this.scale;
		}
	
		public float GetScreenX(float wx) {
			return wx * this.scale + this.offX;
		}
	
		public float GetScreenY(float wy) {
			return wy * this.scale + this.offY;
		}
	
		public void PanScreen(float px, float py) {
			this.offX += px;
			this.offY += py;
		}
	
		public void Offset(float px, float py) {
			this.offX = px;
			this.offY = py;
		}
	
		public void ZoomScreen(float zoom, float cx, float cy) {
			float px = -GetWorldX(cx);
			float py = -GetWorldY(cy);
			this.scale *= zoom;
			px += GetWorldX(cx);
			py += GetWorldY(cy);
			PanScreen(px * this.scale, py * this.scale);
		}
	
		public void Step(float dt) {
			if (enableGravity) {
				world.SetGravity(gravity.x, gravity.y);
			} else {
				world.SetGravity(0.0F, 0.0F);
			}
			if (start) {
				world.Step(dt);
			} else {
				world.Update();
			}
		}
	
		public PPhysWorld GetWorld() {
			return world;
		}
	
		public void SetWorld(PPhysWorld world) {
			this.world = world;
		}
	
		public bool IsStart() {
			return start;
		}
	
		public void SetStart(bool start) {
			this.start = start;
		}
	
		public bool IsEnableGravity() {
			return enableGravity;
		}
	
		public void SetEnableGravity(bool enableGravity) {
			this.enableGravity = enableGravity;
		}
	
		public Vector2f GetGravity() {
			return gravity;
		}
	
		public void SetGravity(Vector2f gravity) {
			this.gravity = gravity;
		}
	
		public float GetScale() {
			return scale;
		}
	
		public void SetScale(float scale) {
			this.scale = scale;
		}
	
		public float GetOffX() {
			return offX;
		}
	
		public void SetOffX(float offX) {
			this.offX = offX;
		}
	
		public float GetOffY() {
			return offY;
		}
	
		public void SetOffY(float offY) {
			this.offY = offY;
		}
	
		public bool IsCenterPos() {
			return isCenterPos;
		}
	
		public void SetCenterPos(bool isCenterPos) {
			this.isCenterPos = isCenterPos;
		}
	
	}
}
